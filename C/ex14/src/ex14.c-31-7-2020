
/*************************************************************
Author : David Brown
Description:
Version :
Date:
**************************************************************/
#include <stdio.h>
#include <strings.h>
#include <stdlib.h>
#include <string.h>
#include<ctype.h>

#define BUFFSIZE 1024

struct words {
     char word[50] ;  
     int  freq;      // Number of occurences of the word
     struct words *next;
};


struct words* findword(struct words *head, char *word) {
    struct words *wordsptr = head;
    struct words *tmp = NULL;

    // Try locate word inthe word list
    while ( wordsptr != NULL ) {
         if ( strcmp(wordsptr->word, word) == 0 ) { // Found word so return word ptr 
              tmp = wordsptr;
         }

         wordsptr=wordsptr->next;
         
         if ( tmp != NULL )  wordsptr = NULL;  // We have found the word
    }

    return tmp;
}

char* stripwhitespace(char* str) {
     int i,j=0;
     int count = 0;
     int len = strlen(str);
       
     for (i=0; i < strlen(str) ; i++ ) {
        
         if ( (str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z') ) {             
            str[j] = str[i];
            j++;
         }
         else {
             count++;
         }

         if ( count > 1 ) {
            str[(len - count)] = '\0';
         } 

      }
      
    return str;
}

void wordstats(struct words *head) {
   struct words *wordlist = head; 

   while ( wordlist != NULL ) {
      printf(" %s  frequency is %d \n", wordlist->word, wordlist->freq);
      wordlist = wordlist->next;
   }
}

char* strlwr ( char *strin) {
      int i;
       for (i=0; i < strlen(strin) ; i++ ) {
            strin[i] = tolower(strin[i]);
       }
    return strin;
}

 struct words * parseline ( char *line , struct words *head) {
   const char delimeter[2]=" ";
   char *field;
   struct words *word, *wordptr;

   field = strtok(line, delimeter );	  
	  
	  
	  

	 
	  while ( field != NULL  ) {
		   // field = stripwhitespace(field);
          field = strlwr(field);


          wordptr = findword(head, field);
          // Add new word to word list
          if (  wordptr == NULL ) {  
              
              word = (struct words*) malloc(sizeof(struct words)) ;
              strcpy(word->word, field) ;
              word->freq = 1;
              word->next = head;
              head = word;    // New word becomes the head of the word list
          }
          else {
              
              wordptr->freq++; // Increase the occurence of word counter by one
          }

		    field = strtok(NULL, delimeter );  // get next field 
     }
			
    
   return head;
   
}

int main( int argc, char **argv)
{
   
   char buf[BUFFSIZE] ;
   FILE *fp    = fopen("bible.txt", "r");
   struct words *head;
   int i=1 ;


   head = (struct words*) malloc(sizeof(struct words)) ;
   

   if ( fp == NULL ) {
      fprintf(stderr,"File cannot be opened.\n");
      exit(1);
   }
   
   while (fgets(buf, 1024, fp)) {
		buf[strlen(buf)-1]='\0';  // remove carriage return from line buffer
      head=parseline(buf, head);
      
      i++;
      

   }
    wordstats(head);
   return 0;
}
